version: 2.1

commands:
    install_awscli:
      description: install aws cli v2
      steps:
        - run:
            name: install aws cli
            command: |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
    install_ansible:
      description: install ansible
      steps:
        - run:
            name: install ansible
            command: |
              sudo apt update
              sudo apt install software-properties-common
              sudo add-apt-repository --yes --update ppa:ansible/ansible
              sudo apt install ansible
    install_nodejs:
      description: install node js 14
      steps:
        - run:
            name: install_node_js_14
            command: |
              curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
              sudo apt install -y nodejs

    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        parameters:
          Workflow_ID: 
           type: string
           default: ${CIRCLE_WORKFLOW_ID:0:7}
        steps:
          - run:
              name: Destroy environments
              when: on_fail
              command: |
                aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
                aws s3 rm s3://udapeople-<< parameters.Workflow_ID >> --recursive
                aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

    revert-migrations:
        description: Revert the last migration if successfully run in the current workflow.
        parameters:
          Workflow_ID: 
           type: string
           default: ${CIRCLE_WORKFLOW_ID:0:7}    
        steps:
          - run:
              name: Revert migrations
              when: on_fail
              command: |
                SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7} )
                if(( $SUCCESS==1 )); 
                then
                  cd ~/project/backend
                  npm install
                  npm run migration:revert
                fi


#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:14.20
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:14.20
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  # test-frontend:
  #   docker:
  #     - image: cimg/node:14.20
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run: 
  #         name: test frontend
  #         command: |
  #           cd frontend
  #           npm install
  #           npm test

                
  # test-backend:
  #   docker:
  #     - image: cimg/node:14.20
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run: 
  #         name: test backend
  #         command: |
  #           cd backend
  #           npm install
  #           npm test
            
  # scan-frontend:
  #   docker:
  #     - image: cimg/node:14.20
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]      
  #     - run:
  #         name: frontend scan
  #         command: |
  #             cd frontend
  #             npm install
  #             npm audit fix --force --audit-level=critical
  #             npm audit --audit-level=critical


  # scan-backend:
  #   docker:
  #     - image: cimg/node:14.20
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]      
  #     - run:
  #         name: backend scan
  #         command: |
  #             cd backend
  #             npm install
  #             npm audit fix --force --audit-level=critical
  #             npm audit fix --force --audit-level=critical
  #             npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            backendIP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo $backendIP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt


      - destroy-environment


  configure-infrastructure:
      docker:
        - image: cimg/base:stable
      steps:
        - checkout
        - install_ansible
        - install_awscli
        - add_ssh_keys:
            fingerprints:
              - "c8:87:13:8a:6d:b3:52:27:5c:93:f6:73:f0:45:33:f0"
        - attach_workspace:
            at: ~/
        - run:
            name: Configure server
            command: |
              cd .circleci/ansible
              cat inventory.txt
              ansible-playbook -i inventory.txt configure-server.yml 
              
        - destroy-environment
  

  run-migrations:
    docker:
      - image: cimg/node:14.20
    steps:
      - checkout
      - install_awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations --loglevel verbose >> migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "No migrations are pending" ~/project/backend/migrations_dump.txt
            then
              curl -d '1' https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi

      - destroy-environment
      - revert-migrations      
 

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]

# VS Code Extension Version: 1.4.0